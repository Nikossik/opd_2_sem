<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Тест на кратковременную память</title>
    <link rel="stylesheet" href="5th-lab-tests/Short-termMemoryTest.css">
</head>
<body>
<div class="container">
    <h1>Проверка кратковременной памяти</h1>
    <div id="difficultySelection">
        <button onclick="startTest()">Начать тест</button>
    </div>
    <div id="memoryImages" style="display: none;">
        <p>Запомните эти фигуры:</p>
        <div id="imagesToRemember"></div>
        <button id="nextButton" style="display:none;" onclick="showTestPage()">Далее</button>
    </div>
    <div id="testImages" style="display: none;">
        <p>Щелкайте по картинкам, которые вы запомнили.</p>
        <div id="allImages"></div>
        <button id="nextLevelButton" onclick="evaluateAndNextLevel()">Далее</button>
    </div>
    <div id="results" style="display: none; padding: 10px; background-color: #f8f8f8; border: 1px solid #ccc; margin-top: 20px;"></div>
    <div id="timerDisplay" style="font-size: 24px; color: black; margin-top: 10px;"></div>
    <div id="resultButtons" style="display: none; margin-top: 10px;">
        <button onclick="sendData()">Отправить результат</button>
        <button onclick="restartTest()">Пройти заново</button>
    </div>
</div>

<script>
    let correctAllCount = 0;
    var correctImages = []; // Массив с правильными изображениями
    var selectedImages = []; // Массив с выбранными пользователем изображениями
    var currentLevel = 0; // Текущий уровень теста
    const levels = ['easy', 'medium', 'hard']; // Последовательность уровней сложности
    var results = []; // Результаты всех уровней
    var timeRemaining; // Переменная для хранения оставшегося времени

    function startTest() {
        currentLevel = 0; // Начинаем с легкого уровня
        results = []; // Очистить результаты
        nextLevel(); // Переходим к следующему уровню
    }

    function nextLevel() {
        if (currentLevel >= levels.length) {
            showFinalResults();
            return;
        }

        const difficulty = levels[currentLevel];
        timeRemaining = getTimeLimit(difficulty); // Получаем время для текущего уровня

        fetch(`/get_images?difficulty=${difficulty}`)
        .then(response => response.json())
        .then(data => {
            const imagesContainer = document.getElementById('imagesToRemember');
            imagesContainer.innerHTML = '';
            data.images.forEach((imgSrc) => {
                const img = document.createElement('img');
                img.src = imgSrc;
                img.className = 'memory-image';
                imagesContainer.appendChild(img);
            });
            correctImages = data.images;
            document.getElementById('difficultySelection').style.display = 'none';
            document.getElementById('memoryImages').style.display = 'block';
            document.getElementById('nextButton').style.display = 'block';
            document.getElementById('timerDisplay').style.display = 'block';
        })
        .catch(error => console.error('Ошибка при загрузке изображений:', error));

        startTimer();
    }

    function getTimeLimit(difficulty) {
        const timeLimits = {
            easy: 150, // 2.5 минуты в секундах
            medium: 120, // 2 минуты
            hard: 60 // 1 минута
        };
        return timeLimits[difficulty] || 150; // Установка времени в зависимости от сложности
    }

    function startTimer() {
        const timerDisplay = document.getElementById('timerDisplay');
        timerDisplay.textContent = `Оставшееся время: ${timeRemaining} сек.`;
        window.timerInterval = setInterval(() => {
            timeRemaining--;
            timerDisplay.textContent = `Оставшееся время: ${timeRemaining} сек.`;
            if (timeRemaining <= 0) {
                clearInterval(timerInterval);
                evaluateAndNextLevel("Время вышло! Переход к следующему заданию.");
            }
        }, 1000);
    }

    function showTestPage() {
        document.getElementById('memoryImages').style.display = 'none';
        fetch('/get_images?difficulty=all')
        .then(response => response.json())
        .then(data => {
            const imagesContainer = document.getElementById('allImages');
            imagesContainer.innerHTML = '';
            data.allImages.forEach((imgSrc) => {
                const img = document.createElement('img');
                img.src = imgSrc;
                img.className = 'memory-image selectable';
                img.onclick = function() { selectImage(this); };
                imagesContainer.appendChild(img);
            });
            document.getElementById('testImages').style.display = 'block';
            document.getElementById('nextLevelButton').style.display = 'block';
        })
        .catch(error => {
            console.error('Ошибка при загрузке изображений для теста:', error);
            alert('Ошибка при загрузке изображений: ' + error.message);
        });
        selectedImages = [];
    }

    function selectImage(imgElement) {
        const imgId = imgElement.src; // Используем src изображения как уникальный идентификатор
        const baseName = getBaseName(imgId);
        const isCorrect = correctImages.some(correct => getBaseName(correct) === baseName);

        if (!isCorrect) {
            evaluateAndNextLevel("Вы выбрали неправильное изображение. Переход к следующему заданию.");
            return; // Завершаем функцию, если изображение неправильное
        }

        imgElement.classList.toggle('selected');

        // Проверяем, содержится ли imgId в массиве selectedImages
        const index = selectedImages.indexOf(imgId);
        if (index === -1) {
            selectedImages.push(imgId);
        } else {
            selectedImages.splice(index, 1);
        }
        console.log("Выбранные изображения: ", selectedImages); // Для отладки
    }

    function getBaseName(url) {
        return url.substring(url.lastIndexOf('/') + 1);
    }

    async function sendResults() {
        const finalResults = {
            levels: results,
            totalCorrect: results.reduce((sum, levelResult) => sum + levelResult.correctCount, 0),
            totalImages: results.reduce((sum, levelResult) => sum + levelResult.totalCount, 0)
        };
        console.log('Final results:', finalResults);

        const data = {
            testType: "memory_test",
            accuracy: finalResults.totalCorrect / finalResults.totalImages
        };

        let url = '';
        const urlObject = new URL(window.location.href);

        if (urlObject.searchParams.has('data')) {
            url += '/memory_test?data=' + urlObject.searchParams.get('data');
        } else {
            url += '/memory_test';
        }

        try {
            const response = await fetch(url, {
                method: 'POST',
                body: JSON.stringify(data),
                headers: {'Content-Type': 'application/json'},
            });
            const result = await response.json();
            console.log('Success:', result);
            window.location.href = response.url; // Перенаправление на другой URL
        } catch (error) {
            console.error('Error:', error);
        }
    }

    async function sendData() {
            const data = {
                testType: "short_term_memory_test",
                result: correctAllCount
            }

            let url = ''
            const urlObject = new URL(window.location.href)

            if (urlObject.searchParams.has('data')) {
                url += '/abstract_test?data=' + urlObject.searchParams.get('data')
            } else {
                url += '/abstract_test'
            }

            await fetch(url, {
                method: 'POST',
                body: JSON.stringify(data),
                headers: {'Content-Type': 'application/json'},
            })
                .then(res => {
                    console.log(res)
                    // Redirect to another URL
                    window.location.href = res.url;
                })
                .catch(error => console.error(error));

        }

    function restartTest() {
        document.getElementById('difficultySelection').style.display = 'block';
        document.getElementById('memoryImages').style.display = 'none';
        document.getElementById('testImages').style.display = 'none';
        document.getElementById('results').style.display = 'none';
        document.getElementById('resultButtons').style.display = 'none';
        document.getElementById('timerDisplay').style.display = 'none';
        document.getElementById('nextLevelButton').style.display = 'none';
        // Очистите все переменные или состояния, если это необходимо
        correctImages = [];
        selectedImages = [];
        currentLevel = 0; // Сброс уровня
        results = []; // Очистить результаты
    }

    function evaluateAndNextLevel(message = "Переход к следующему заданию.") {
        clearInterval(window.timerInterval); // Остановить таймер
        evaluateResults(); // Сохранить результат текущего задания
        currentLevel++; // Увеличить уровень
        document.getElementById('testImages').style.display = 'none'; // Скрыть все картинки
        document.getElementById('allImages').innerHTML = ''; // Очистить контейнер с картинками
        nextLevel(); // Переход к следующему уровню
    }

    function evaluateResults() {
        console.log("Вызов функции evaluateResults");
        console.log("Выбранные изображения: ", selectedImages);
        console.log("Правильные изображения: ", correctImages);

        const correctCount = selectedImages.filter(selected => {
            const selectedBaseName = getBaseName(selected);
            return correctImages.some(correct => getBaseName(correct) === selectedBaseName);
        }).length;

        results.push({
            level: levels[currentLevel],
            correctCount: correctCount,
            totalCount: correctImages.length
        });

        console.log(`Результаты уровня ${levels[currentLevel]}: ${correctCount} из ${correctImages.length}`); // Для отладки
    }

    function showFinalResults() {
        clearInterval(window.timerInterval); // Очистка текущего интервала таймера
        document.getElementById('timerDisplay').style.display = 'none'; // Скрыть таймер

        const finalResults = results.map((result, index) => {
            return `Задание ${index + 1} (${result.level}): ${result.correctCount} из ${result.totalCount}`;
        }).join(' ');
        const totalCorrect = results.reduce((sum, levelResult) => sum + levelResult.correctCount, 0);
        const totalImages = results.reduce((sum, levelResult) => sum + levelResult.totalCount, 0);

        const resultText = `Итоговые результаты: ${finalResults} Всего правильно: ${totalCorrect} из ${totalImages}`;
        const resultsElement = document.getElementById('results');
        resultsElement.textContent = resultText;
        resultsElement.style.display = 'block'; // Устанавливаем элемент как видимый

        correctAllCount = totalCorrect;

        console.log(resultText); // Для отладки

        // Показать кнопки для отправки результатов и перезапуска теста
        document.getElementById('resultButtons').style.display = 'block';
        document.getElementById('nextLevelButton').style.display = 'none';
    }
</script>
</body>
</html>